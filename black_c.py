# -*- coding: utf-8 -*-
"""Black_C.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yKslwFk7kg_Sh_uTYdtyp2DLlBLbLeGr
"""

import csv
import requests
from bs4 import BeautifulSoup
import re
from textblob import TextBlob
from nltk.corpus import cmudict

"""#Extracting title of one article for example"""

import requests
from bs4 import BeautifulSoup

url = 'https://insights.blackcoffer.com/ai-in-healthcare-to-improve-patient-outcomes/'

response = requests.get(url)

soup = BeautifulSoup(response.content, 'html.parser')

title = soup.title.string

print(title)

"""#Extracting and storing the article texts"""

import csv
import requests
from bs4 import BeautifulSoup
import re

input_file = '/content/Input.xlsx - Sheet1.csv'  
output_file = 'output.txt' 

with open(input_file, 'r') as csvfile:
    reader = csv.reader(csvfile)
    rows = list(reader)
    headers = rows.pop(0)
    titles = []
    
    for row in rows:
        url = row[0]
        if not re.match(r'^https?://', url):
            print(f"Skipping invalid URL: {url}")
            continue
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        title = soup.title.string
        titles.append(title)
    
    with open(output_file, 'w') as txtfile:
        for title in titles:
            txtfile.write(title + '\n')

import nltk

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('brown')
nltk.download('cmudict')

input_file = '/content/Input.xlsx - Sheet1.csv'
output_file = '/content/Output Data Structure.xlsx - Sheet1.csv'

"""#Returning the number of syllables"""

d = cmudict.dict() # Load the CMU Pronouncing Dictionary

def count_syllables(word):
    # Count the number of syllables in a word using the CMU Pronouncing Dictionary
    if word.lower() not in d:
        return 0
    return max([len([y for y in x if y[-1].isdigit()]) for x in d[word.lower()]])

"""#Calculating and storing the values to output_CSV file """

with open(input_file, 'r') as csvfile:
    reader = csv.reader(csvfile)
    rows = list(reader)
    headers = rows.pop(0)
    data = []
    
    for row in rows:
        url = row[0]
        if not re.match(r'^https?://', url):
            print(f"Skipping invalid URL: {url}")
            continue
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        title = soup.title.string
        blob = TextBlob(title)
        neg_score = blob.sentiment.polarity * -1 # multiply by -1 to get negative score
        pos_score = blob.sentiment.polarity
        polarity_score = blob.sentiment.polarity
        subjectivity_score = blob.sentiment.subjectivity
        sentences = blob.sentences
        word_count = len(blob.words)
        complex_words = [word for word in blob.words if count_syllables(word) >= 3]
        complex_word_count = len(complex_words)
        complex_word_percentage = complex_word_count / word_count * 100
        avg_sentence_length = word_count / len(sentences)
        avg_word_length = sum(len(word) for word in blob.words) / len(blob.words)
        personal_pronouns = sum(1 for word, tag in blob.tags if tag == 'PRP')
        syllables = [count_syllables(word) for word in blob.words]
        syllables_per_word = sum(syllables) / len(syllables)
        fog_index = 0.4 * (avg_sentence_length + complex_word_percentage)
        data.append([
            neg_score, pos_score, polarity_score, subjectivity_score,
            avg_sentence_length, complex_word_percentage, fog_index,
            word_count / len(sentences), complex_word_count, word_count, syllables_per_word,
            personal_pronouns, avg_word_length
        ])

with open(output_file, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow([
            'Negative Score', 'Positive Score', 'Polarity Score', 'Subjectivity Score',
            'Avg. Sentence Length', '% of Complex Words', 'FOG Index',
            'Avg. Words per Sentence', 'Complex Word Count', 'Word Count', 'Syllables per Word',
            'Personal Pronouns', 'Avg. Word Length'
        ])
        writer.writerows(data)